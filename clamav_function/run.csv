
using System.IO;
using System.Linq;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;
using nClam;

public static void Run(Stream myBlob, string name, ILogger log)
        {
            try{
            // Create client
            var clam = new ClamClient("20.190.208.90",3310);
            
            // Scanning for viruses...
            var scanResult = clam.SendAndScanFileAsync(myBlob).Result;

            switch (scanResult.Result)
            {
                case ClamScanResults.Clean:
                    log.LogInformation("The file is clean!");
                    break;
                case ClamScanResults.VirusDetected:
                    log.LogInformation("Virus Found!");
                    log.LogInformation("Virus name: {0}", scanResult.InfectedFiles.First().VirusName);
                    break;
                case ClamScanResults.Error:
                    log.LogInformation("Error scanning file: {0}", scanResult.RawResult);
                    break;
            }
        }

        catch (Exception ex)
        {
        log.LogInformation($"C# Blob trigger function Processed blob\n Name:{name} \n Size: {myBlob.Length} Bytes");
        }

    }
    


/*public static async Task Run(HttpRequest req, ILogger log)
{
    log.LogInformation("Scan Called");

    #[BlobTrigger("testcontainer/{name}", Connection = "teststorageaccount441_STORAGE")]

    try
    {
        var clamClient = new ClamClient("YOURDOCKERIPADDRESS", 3310);
        var formFile = req.Form.Files[0];

        using (var memoryStream = new MemoryStream())
        {
            await formFile.CopyToAsync(memoryStream);
            var result = await clamClient.SendAndScanFileAsync(memoryStream.ToArray());
            return (ActionResult)new OkObjectResult(new
            {
                FileName = formFile.FileName,
                IsClean = result.InfectedFiles == null || result.InfectedFiles.Count == 0,
                ScanDescription = result.Result.ToString()
            }
            );
        }

    }
    catch (Exception ex)
    {
        return new BadRequestObjectResult(ex.ToString());
    }
} */